to_filter
index
devtools::load_all(".")
x@table |>
dplyr::filter(!!!filters) |> dplyr::show_query()
extract_array(x, list(10:20, NULL))
filters
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
index
index |>
purrr::discard(is.null)
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
filters
x@table |>
dplyr::filter(!!!filters) |> dplyr::show_query()
?imap
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
x@table |>
dplyr::filter(!!!filters) |> dplyr::show_query()
filters
?set_names
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
filters
x@table |>
dplyr::filter(!!!filters) |> dplyr::show_query()
x@table |>
dplyr::filter(!!!filters) |> dplyr::collect()
x@table
devtools::load_all(".")
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
filters
x@table |>
dplyr::filter(!!!filters) |> dplyr::collect()
x@table |>
dplyr::filter(!!!filters) |> dplyr::show_query()
DBI::dbGetQuery("SELECT *
FROM "test.parquet"
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
x@table |>
dplyr::filter(!!!filters) |> dplyr::show_query()
x@table |>
dplyr::filter(!!!filters) |> dplyr::collect()
?array
array(0, dim=c(2, 4))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
df
dim_cols
?Extract
output[dim_cols]
output
output[dim_cols]
df |>
dplyr::select(!!x@index_cols) |>
as.matrix()
df |> dplyr::pull({{x@value_col}})
value_col <- df |> dplyr::pull(!!x@value_col)
df |> dplyr::pull(!!x@value_col)
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
output
output
index
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
seq_along(index) |>
purrr::map_int(function(i){
if (is.null(index[[i]])){
x@dim[[i]]
}
else {
length(index[[i]])
}
})
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
df |>
dplyr::select(!!x@index_cols) |>
dplyr::mutate(dplyr::across(dplyr::everything(), dplyr::dense_rank()))
df |>
dplyr::select(!!x@index_cols) |>
dplyr::mutate(dplyr::across(dplyr::everything(), dplyr::dense_rank)
df |>
df |>
dplyr::select(!!x@index_cols) |>
dplyr::mutate(dplyr::across(dplyr::everything(), dplyr::dense_rank))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
output
output
?tidyr::expand_grid
expand.grid(1:4, 4:5)
expand.grid(1:4, 4:5, NULL)
expand.grid(list(1:4, 4:5)
)
?dplyr::if_else()
dplyr::if_else(list(TRUE, FALSE), list(1, 2), list(3, 4))
dplyr::if_else(c(TRUE, FALSE), list(1, 2), list(3, 4))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
purrr::map_lgl(index, is.null),
purrr::map_lgl(index, is.null)
x@dim
index
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim,
index
)
seq_len(x@dim)
x@dim |> purrr::map_dbl(seq_len)
x@dim |> purrr::map_dbl(seq_len)
x@dim |> purrr::map(seq_len)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len) |> purrr::set_names(names(index)),
index
)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len)),
dim_grid <- dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(index)) |>
expand.grid()
dim_grid
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(index))
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid()
?copy_to
#extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
dim_grid
dplyr::join(dim_grid, x@table)
dplyr::inner_join(dim_grid, x@table)
dplyr::inner_join(dim_grid, x@table) |> dplyr::show_query()
?across
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
dim_grid
dim_grid |> dplyr::show_query()
b =  dim_grid <- dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name=table_name)
b =  dim_grid <- dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="artsd")
b
dplyr::mutate(b,
dplyr::across(dplyr::everything(), dplyr::dense_rank, .names="rank_{.col}")
)
dplyr::mutate(b,
i= dplyr::dense_rank(i)
)
dplyr::mutate(b,
i= dplyr::dense_rank(i)
) |> dplyr::show_query()
dplyr::mutate(b,
i= dplyr::dense_rank(i), j = dplyr::dense_rank(j)
) |> dplyr::show_query()
b
dplyr::mutate(b,
dplyr::across(dplyr::everything(), dplyr::dense_rank
)
_
dplyr::mutate(b,
dplyr::across(dplyr::everything(), dplyr::dense_rank
))
dplyr::mutate(b,
dplyr::across(dplyr::everything(), dplyr::dense_rank
))b
b
class(b)
dplyr::mutate(
b, dplyr::across(dplyr::everything(), dplyr::dense_rank, .names="rank_{.col}")
)
dplyr::mutate(
b, dplyr::across(dplyr::everything(), dplyr::dense_rank, .names="rank_{.col}")
) |> dplyr::show_query()
dplyr::mutate(
b, dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |> dplyr::show_query()
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
dim_grid
dim_grid |> View()
dim_grid |> print(n=100)
z = matrix(nrow=2, ncol=2)
z
znames(x@dim)
names(x@dim)
?dplyr::select
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name=table_name) |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::select(
dplyr::starts_with("rank"),
{{ x@value_col }}
)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="table_name") |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::select(
dplyr::starts_with("rank"),
{{ x@value_col }}
)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="stdsds") |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::select(
dplyr::starts_with("rank"),
dplyr::any_of(x@value_col)
)
?dplyr::rename
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="std") |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::rename_with(
.cols=dplyr::starts_with("rank"),
.fn=~stringr::str_remove(., "rank_")
)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="rstdrstdrstd") |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::select(
dplyr::starts_with("rank"),
dplyr::any_of(x@value_col)
) |>
dplyr::rename_with(
.cols=dplyr::starts_with("rank"),
.fn=~stringr::str_remove(., "rank_")
)
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="rstdrstdrstd") |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::select(
dplyr::starts_with("rank"),
dplyr::any_of(x@value_col)
) |>
dplyr::rename_with(
.cols=dplyr::starts_with("rank"),
.fn=~stringr::str_remove(., "rank_")
) |> dplyr::show_query()
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
) |>
purrr::set_names(names(x@dim)) |>
expand.grid() |>
dplyr::copy_to(conn, df=_, name="rstdrstd") |>
dplyr::mutate(
dplyr::across(dplyr::everything(), dense_rank, .names="rank_{.col}")
) |>
dplyr::inner_join(x@table, by = names(x@dim)) |>
dplyr::select(
dplyr::starts_with("rank"),
dplyr::any_of(x@value_col)
) |>
dplyr::rename_with(
.cols=dplyr::starts_with("rank"),
.fn=~stringr::str_remove(., "rank_")
) |> dplyr::show_query()
dplyr::if_else(
purrr::map_lgl(index, is.null),
x@dim |> purrr::map(seq_len),
index
)
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
index
x@dim
length(index)
lengths(index)
index
x@dim
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
result_dims
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
result_dims
result_dims |>
purrr::map(seq_len)
result_dims |>
purrr::map(seq_len) |>
expand.grid()
entries
?dplyr::copy_to()
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
x@table
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
dim_cols
value_col
output
devtools::load_all(".")
extract_array(x, list(10:20, NULL))
?extract_array(x, list(10:20, NULL))
debug(extract_array)
extract_array(x, list(10:20, NULL))
expected_dim
dim(ans)
devtools::load_all(".")
undebug(extract_array)
extract_array(x, list(10:20, NULL))
extract_array(x, list(10:20, NULL))
extract_array(x, list(10:20, NULL))
extract_array(x, list(10:20, NULL))
?col
x = rnorm(n=16, nrow=4)
x = rnorm(n=16) |> matrix(nrow=4)
x
col(x)
row(x)
y = rnorm(n=32) |> array(c(4, 4, 2))
y
row(y)
letters[10]
letters[9]
letters[-1:8]
letters[-(1:8)]
?ndim
?expand.grid
letters[24]
24 - 8
devtools::load_all(".")
devtools::document()
devtools::document()
DelayedArray::DelayedArray()
DelayedArray::DelayedArray
library(DelayedArray)
devtools::document()
devtools::load_all(".")
writeSqlArray(y)
devtools::load_all(".")
writeSqlArray(y)
devtools::load_all(".")
writeSqlArray(y)
devtools::load_all(".")
writeSqlArray(y)
devtools::load_all(".")
writeSqlArray(y)
dim(array)
dim(array) |>
purrr::map(seq_len)
dim(array) |>
purrr::map(seq_len) |>
purrr::set_names(index_colnames)
dim(array) |>
purrr::map(seq_len) |>
purrr::set_names(index_colnames) |>
tidyr::expand_grid()
dim(array) |>
purrr::map(seq_len) |>
purrr::set_names(index_colnames) |>
expand.grid()
?tidyr::expand_grid
devtools::load_all(".")
writeSqlArray(y)
dim_lengths
?dplyr::tbl
methods("tbl")
library(dbplyr)
library(dplyr)
methods("tbl")
tbl.DBIConnection
conn = duckdb::duckdb() |> DBI::dbConnect()
tbl(conn)
tbl(conn, name="fake")
tbl(conn, from="fake")
tbl(conn, from="fake") |> dplyr::show_query()
?tbl
?copy_to
conn
conn = duckdb::duckdb() |> DBI::dbConnect()
class(conn)
devtools::load_all(".")
devtools::document()
writeSqlArray(y, conn, "foo")
storeSqlArray(y, conn, "foo")
f = storeSqlArray(y, conn, "foo")
devtools::document()
devtools::document()
devtools::document()
f = storeSqlArray(y, conn, "foo")
f = storeSqlArray(y, conn, "foo", overwrite=T)
f
letters[8]
letters[9]
devtools::document()
f = storeSqlArray(y, conn, "foo", overwrite=T)
f
devtools::document()
?storeSqlArray
?storeSqlArray
devtools::document()
?store_sql_array
devtools::test()
devtools::test()
devtools::test()
delayed
devtools::load_all(".")
devtools::test()
delayed
final
